/*
 * Copyright 2011-Present Author or Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.cp.desktop.awt.event;

import java.awt.CardLayout;
import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import org.cp.elements.lang.Assert;

@SuppressWarnings("all")
public class ViewCardListener implements ActionListener {

  private Container container;

  private String cardName;

  /**
   * Constructs a new instannce of {@link ViewCardListener} used to listen for card change events
   * in a {@link Container} that uses the {@link CardLayout} manager.
   *
   * @param container {@link Container} using the {@link CardLayout} manager.
   * @param cardName {@link String} containing the {@literal name} of the card to switch to.
   * @see java.awt.Container
   */
  public ViewCardListener(Container container, String cardName) {
    setContainer(container);
    setCardName(cardName);
  }

  /**
   * Returns the name of the card in the CardLayout.
   * @return a String value representing the name of the card in the CardLayout.
   */
  public String getCardName() {
    return cardName;
  }

  /**
   * Sets the card name of the card to switch to in the CardLayout.
   * @param cardName the name of the card in the CardLayout.
   */
  private void setCardName(String cardName) {
    Assert.hasText(cardName, "[%s] is not a valid card name", cardName);
    this.cardName = cardName;
  }

  /**
   * Returns the container object which switches differnt cards in it's layout.
   * @return the container object.
   */
  public Container getContainer() {
    return container;
  }

  /**
   * Sets the specified container using the CardLayout manager.
   * @param container the java.awt.Container object.
   * @throws NullPointerException if the container object reference
   * is null.
   * @throws IllegalArgumentException if the container object does
   * not use the CardLayout as it's layout manager.
   */
  private void setContainer(Container container) {

    Assert.notNull(container, "Container is required");
    Assert.isInstanceOf(container.getLayout(), CardLayout.class, "Container must use the CardLayout manager");

    this.container = container;
  }

  /**
   * Called by the event source, for which this listener registered itself by
   * calling the addActionListener method, passing a ActionEvent object containing
   * information concering the event.  The event source sends an ActionEvent to
   * this object notifying that the user has requested a change in the user
   * interface to display the card specified by "cardName" in the container
   * specified by "container".
   *
   * @param event an ActionEvent generated by the event source.
   */
  public void actionPerformed(ActionEvent event) {

    CardLayout cardLayoutManager = (CardLayout) getContainer().getLayout();

    cardLayoutManager.show(getContainer(), getCardName());
  }
}
